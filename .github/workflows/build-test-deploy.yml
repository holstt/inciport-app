# Reusable pipeline to build, test and deploy a service
name: build-test-deploy

on:
  workflow_call:
    inputs:
      project_dir:
        required: true
        type: string
      build_args:
        required: true
        type: string

env:
  # To be generated dynamically in the workflow
  # (Declaring them here avoids vs plugin warning about invalid access)
  DOCKER_TAG_BRANCH:
  DOCKER_TAG_LATEST:

jobs:
  build-test-deploy:
    env:
      BASE_DOMAIN: inciport.rocks
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      # Enable slug action in order to get slug of branch name
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

      # Set branch name slug as env variable used in docker compose configs
      - name: Set env
        run: |
          SERVICE_NAME=${{ inputs.project_dir }}
          echo DOCKER_TAG_BRANCH=${{ secrets.DOCKERHUB_REPO }}:$GITHUB_REF_SLUG--$SERVICE_NAME >> $GITHUB_ENV
          echo DOCKER_TAG_LATEST=${{ secrets.DOCKERHUB_REPO }}:latest--$SERVICE_NAME >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      # Ensure Docker Hub login to pull cache before running tests
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Test
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.project_dir }}/Dockerfile
          target: test
          push: false
          build-args: ${{ inputs.build_args}}
          cache-from:
            | # Fallback to latest cache if branch cache not found (e.g. first build on branch)
            type=registry,ref=${{ env.DOCKER_TAG_BRANCH}}
            type=registry,ref=${{ env.DOCKER_TAG_LATEST}}
          cache-to: type=inline

        # Generates metadata for Docker image based on Github Action events and Git metadata
      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.project_dir }}/Dockerfile
          push: true
          build-args: ${{ inputs.build_args}}

          # Use multi arch build, to support arm64 (e.g. Raspberry Pi)
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_TAG_BRANCH}}
          cache-from:
            | # Fallback to latest cache if branch cache not found (e.g. first build on branch)
            type=registry,ref=${{ env.DOCKER_TAG_BRANCH}}
            type=registry,ref=${{ env.DOCKER_TAG_LATEST}}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }} # Get labels from metadata action

